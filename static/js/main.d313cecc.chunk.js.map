{"version":3,"sources":["components/square.js","components/board.js","components/game.js","index.js"],"names":["Square","highlight","onClick","value","className","renderSquare","i","line","squares","includes","renderBoard","size","boardHTML","temp","j","push","Board","checkLine","winLength","length","calculateWinner","newSquares","result","Array","Math","sqrt","fill","to2DSquare","parseInt","isWin","point","row","col","player","map","e","diagonal","lastPoint","x","Game","useState","newMove","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","setSize","winner","setWinner","setLine","isIncre","setIsIncre","jumpTo","step","currentHistory","slice","k","status","current","moves","move","desc","floor","type","min","defaultValue","onChange","target","concat","handleClick","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d313cecc.chunk.js","sourcesContent":["function Square({highlight, onClick, value}) {\r\n  return (\r\n    <button\r\n        className={`square ${highlight ? 'highlight' : ''}`}\r\n        onClick={onClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./square\";\r\n\r\nfunction Board({line, squares, onClick, size}) {\r\n  return (\r\n    <div>\r\n      {renderBoard(line, squares, onClick, size)}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderSquare(i, line, squares, onClick) {\r\n  return (\r\n    <Square\r\n      key={i}\r\n      highlight={line.includes(i)}\r\n      value={squares[i]}\r\n      onClick={() => onClick(i)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderBoard(line, squares, onClick, size) {\r\n  var boardHTML = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    let temp = [];\r\n    for (let j = 0; j < size; j++) {\r\n      temp.push(renderSquare(size * i + j, line, squares, onClick));\r\n    }\r\n    boardHTML.push(\r\n      <div key={\"row_\" + i} className=\"board-row\">\r\n        {temp}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return boardHTML;\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./board\";\r\n\r\nfunction Game() {\r\n  /* Declare state */\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(9).fill(null),\r\n      newMove: null,\r\n    },\r\n  ]);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [size, setSize] = useState(3);\r\n  const [winner, setWinner] = useState(null);\r\n  const [line, setLine] = useState([]);\r\n  const [isIncre, setIsIncre] = useState(true);\r\n\r\n  function handleClick(i) {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares, size) != null || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(currentHistory.concat([{ squares: squares, newMove: i }]));\r\n    setStepNumber(currentHistory.length);\r\n\r\n    let winner = calculateWinner(squares, size);\r\n    if (winner) {\r\n      let line = [];\r\n      for (let k = 0; k < winner.line.length; k++) {\r\n        line.push(winner.line[k].row * size + winner.line[k].col);\r\n      }\r\n      setWinner(winner.player);\r\n      setLine(line);\r\n    } else {\r\n      setXIsNext(!xIsNext);\r\n    }\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    const currentHistory = history.slice(0, step + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n    let winner = calculateWinner(squares, size);\r\n    if (winner != null) {\r\n      let line = [];\r\n      for (let k = 0; k < winner.line.length; k++) {\r\n        line.push(winner.line[k].row * size + winner.line[k].col);\r\n      }\r\n      setWinner(winner.player);\r\n      setLine(line);\r\n    } else {\r\n      setWinner(null);\r\n      setLine([]);\r\n    }\r\n  }\r\n\r\n  function handleChangeSize(e) {\r\n    setHistory([\r\n      {\r\n        squares: Array(e.target.value ** 2).fill(null),\r\n      },\r\n    ]);\r\n    setXIsNext(true);\r\n    setStepNumber(0);\r\n    setSize(e.target.value);\r\n    setWinner(null);\r\n    setLine([]);\r\n  }\r\n\r\n  function handleSort() {\r\n    setIsIncre(!isIncre);\r\n  }\r\n\r\n  /* Render  */\r\n\r\n  const currentHistory = history;\r\n  const current = currentHistory[stepNumber];\r\n\r\n  const moves = currentHistory.map((step, move) => {\r\n    const desc = move\r\n      ? \"Go to move #\" +\r\n        move +\r\n        \" (\" +\r\n        Math.floor(step.newMove / size) +\r\n        \", \" +\r\n        (step.newMove % size) +\r\n        \")\"\r\n      : \"Go to game start\";\r\n\r\n    if (move === stepNumber)\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>\r\n            <strong>{desc}</strong>\r\n          </button>\r\n        </li>\r\n      );\r\n    else\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n  });\r\n\r\n  let status;\r\n  if (winner != null) {\r\n    status = \"Winner: \" + winner;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"screen\">\r\n      <div className=\"game-size-controller\">\r\n        <span>\r\n          Size of the game:\r\n          <input\r\n            type=\"number\"\r\n            min=\"3\"\r\n            defaultValue=\"3\"\r\n            className=\"input-number\"\r\n            onChange={handleChangeSize}\r\n          />\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            line={line}\r\n            onClick={(i) => handleClick(i)}\r\n            size={size}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button className=\"sort-button\" onClick={handleSort}>\r\n            <strong>Sort: </strong> {isIncre ? \"increasing\" : \"decreasing\"}{\" \"}\r\n          </button>\r\n          <div className=\"text\">\r\n            History list: location each move in <strong>(row, col)</strong>{\" \"}\r\n            format\r\n          </div>\r\n          <ol>{isIncre ? moves : moves.reverse()}</ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction to2DSquare(squares) {\r\n  let result = Array(Math.sqrt(squares.length));\r\n  for (let i = 0; i < result.length; i++) {\r\n    result[i] = Array(Math.sqrt(squares.length)).fill(null);\r\n  }\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    for (let j = 0; j < result.length; j++) {\r\n      result[i][j] = squares[i * result.length + j];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction checkLine(line, winLength) {\r\n  for (let i = 0, j = 0; i < line.length - 1; i = j) {\r\n    if (line[i] != null) {\r\n      for (j = i + 1; j < line.length && line[j] === line[i]; j++) {}\r\n      // Nếu chuỗi kí tự đã đủ điều kiện thắng\r\n      if (j - i >= winLength) {\r\n        return line.length - j;\r\n      }\r\n    } else j = i + 1;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction calculateWinner(squares, size) {\r\n  let newSquares = to2DSquare(squares);\r\n  let winLength = size > 5 ? 5 : parseInt(size);\r\n  // Kiểm tra các dòng\r\n  for (let i = 0; i < newSquares.length; i++) {\r\n    let isWin = checkLine(newSquares[i], winLength);\r\n    if (isWin != null) {\r\n      let line = [];\r\n      for (let point = 0; point < winLength; point++) {\r\n        line.push({\r\n          row: i,\r\n          col: newSquares.length - isWin - 1 - point,\r\n        });\r\n      }\r\n      let result = {\r\n        player: newSquares[i][newSquares.length - 1 - isWin],\r\n        line: line,\r\n      };\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // Kiểm tra các cột\r\n  for (let i = 0; i < newSquares.length; i++) {\r\n    let isWin = checkLine(\r\n      newSquares.map((e) => e[i]),\r\n      winLength\r\n    );\r\n    if (isWin != null) {\r\n      let line = [];\r\n      for (let point = 0; point < winLength; point++) {\r\n        line.push({\r\n          row: newSquares.length - isWin - 1 - point,\r\n          col: i,\r\n        });\r\n      }\r\n      let result = {\r\n        player: newSquares.map((e) => e[i])[newSquares.length - 1 - isWin],\r\n        line: line,\r\n      };\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // Kiểm tra đường chéo theo hướng /\r\n  for (let i = 0; i < 2 * newSquares.length - 1; i++) {\r\n    let diagonal = [];\r\n    let lastPoint;\r\n    for (let j = 0; j < newSquares.length; j++) {\r\n      let x = i - j;\r\n      if (x >= 0 && x < newSquares.length) {\r\n        diagonal.push(newSquares[j][x]);\r\n        lastPoint = {\r\n          row: j,\r\n          col: x,\r\n        };\r\n      }\r\n    }\r\n\r\n    let isWin = checkLine(diagonal, winLength);\r\n    if (isWin != null) {\r\n      let line = [];\r\n      for (let point = 0; point < winLength; point++) {\r\n        if (size > 5) {\r\n          line.push({\r\n            row: lastPoint.row - isWin - point,\r\n            col: lastPoint.col + isWin + point,\r\n          });\r\n        } else {\r\n          line.push({\r\n            row: lastPoint.row - point,\r\n            col: lastPoint.col + point,\r\n          });\r\n        }\r\n      }\r\n      let result = {\r\n        player: diagonal[diagonal.length - 1 - isWin],\r\n        line: line,\r\n      };\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // Kiểm tra đường chéo theo hướng \\\r\n  for (let i = 0; i < 2 * newSquares.length - 1; i++) {\r\n    let diagonal = [];\r\n    let lastPoint;\r\n    for (let j = 0; j < newSquares.length; j++) {\r\n      let x = i - (newSquares.length - 1 - j);\r\n      if (x >= 0 && x < newSquares.length) {\r\n        diagonal.push(newSquares[j][x]);\r\n        lastPoint = {\r\n          row: j,\r\n          col: x,\r\n        };\r\n      }\r\n    }\r\n\r\n    let isWin = checkLine(diagonal, winLength);\r\n    if (isWin != null) {\r\n      let line = [];\r\n      for (let point = 0; point < winLength; point++) {\r\n        if (size > 5) {\r\n          line.push({\r\n            row: lastPoint.row - isWin - point,\r\n            col: lastPoint.col - isWin - point,\r\n          });\r\n        } else {\r\n          line.push({\r\n            row: lastPoint.row - point,\r\n            col: lastPoint.col - point,\r\n          });\r\n        }\r\n      }\r\n      let result = {\r\n        player: diagonal[diagonal.length - 1 - isWin],\r\n        line: line,\r\n      };\r\n      return result;\r\n    }\r\n  }\r\n\r\n  if (squares.includes(null) === false) {\r\n    let result = {\r\n      player: \"draw\",\r\n      line: [],\r\n    };\r\n    return result;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport Game from './components/game';\r\n  \r\n// ========================================\r\n  \r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}